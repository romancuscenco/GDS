// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34014
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace GDS.Specs.TransportManager
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ManageTransportUnits")]
    public partial class ManageTransportUnitsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ManageTransportUnits.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ManageTransportUnits", "In order to effectively manage the GDS Transport Park\r\nAs a Transport Manager \r\nI" +
                    " want to be able to view, add and retire GDS Transport Units", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "SerialNumber",
                        "Status"});
            table1.AddRow(new string[] {
                        "P-348-A",
                        "Active"});
            table1.AddRow(new string[] {
                        "S-232-G",
                        "Active"});
            table1.AddRow(new string[] {
                        "T-282-D",
                        "Active"});
            table1.AddRow(new string[] {
                        "V-517-U",
                        "Retired"});
            table1.AddRow(new string[] {
                        "G-135-N",
                        "Retired"});
#line 7
 testRunner.Given("I have the following transports in the system", ((string)(null)), table1, "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("View the list of active transports")]
        [NUnit.Framework.CategoryAttribute("Transport_Manager_User")]
        public virtual void ViewTheListOfActiveTransports()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("View the list of active transports", new string[] {
                        "Transport_Manager_User"});
#line 17
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 18
 testRunner.When("I request the list of \"Active\" Transports", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "SerialNumber",
                        "Status"});
            table2.AddRow(new string[] {
                        "P-348-A",
                        "Active"});
            table2.AddRow(new string[] {
                        "S-232-G",
                        "Active"});
            table2.AddRow(new string[] {
                        "T-282-D",
                        "Active"});
#line 19
 testRunner.Then("I should see the following list", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("View the list of retired transports")]
        [NUnit.Framework.CategoryAttribute("Transport_Manager_User")]
        public virtual void ViewTheListOfRetiredTransports()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("View the list of retired transports", new string[] {
                        "Transport_Manager_User"});
#line 26
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 27
 testRunner.When("I request the list of \"Retired\" Transports", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "SerialNumber",
                        "Status"});
            table3.AddRow(new string[] {
                        "V-517-U",
                        "Retired"});
            table3.AddRow(new string[] {
                        "G-135-N",
                        "Retired"});
#line 28
 testRunner.Then("I should see the following list", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Adding new transport to the active list")]
        [NUnit.Framework.CategoryAttribute("Transport_Manager_User")]
        public virtual void AddingNewTransportToTheActiveList()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding new transport to the active list", new string[] {
                        "Transport_Manager_User"});
#line 35
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "SerialNumber",
                        "Status"});
            table4.AddRow(new string[] {
                        "C-992-H",
                        "Active"});
#line 36
 testRunner.When("I send the request of adding the following transport", ((string)(null)), table4, "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "SerialNumber",
                        "Status"});
            table5.AddRow(new string[] {
                        "P-348-A",
                        "Active"});
            table5.AddRow(new string[] {
                        "S-232-G",
                        "Active"});
            table5.AddRow(new string[] {
                        "T-282-D",
                        "Active"});
            table5.AddRow(new string[] {
                        "C-992-H",
                        "Active"});
#line 39
 testRunner.Then("I should have the following active transports in the system", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Retiring an active transport")]
        [NUnit.Framework.CategoryAttribute("Transport_Manager_User")]
        public virtual void RetiringAnActiveTransport()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Retiring an active transport", new string[] {
                        "Transport_Manager_User"});
#line 48
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "SerialNumber",
                        "Status"});
            table6.AddRow(new string[] {
                        "T-282-D",
                        "Active"});
#line 49
 testRunner.When("I send the request of retiring the following transport", ((string)(null)), table6, "When ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "SerialNumber",
                        "Status"});
            table7.AddRow(new string[] {
                        "T-282-D",
                        "Retired"});
            table7.AddRow(new string[] {
                        "V-517-U",
                        "Retired"});
            table7.AddRow(new string[] {
                        "G-135-N",
                        "Retired"});
#line 52
 testRunner.Then("I should have the following retired transports in the system", ((string)(null)), table7, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Editing an active transport\'s details")]
        [NUnit.Framework.CategoryAttribute("Transport_Manager_User")]
        public virtual void EditingAnActiveTransportSDetails()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Editing an active transport\'s details", new string[] {
                        "Transport_Manager_User"});
#line 60
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 61
 testRunner.When("I send the request of editing the following transport\'s serial number from \"T-282" +
                    "-D\" to \"T-282-DH\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "SerialNumber",
                        "Status"});
            table8.AddRow(new string[] {
                        "P-348-A",
                        "Active"});
            table8.AddRow(new string[] {
                        "S-232-G",
                        "Active"});
            table8.AddRow(new string[] {
                        "T-282-DH",
                        "Active"});
            table8.AddRow(new string[] {
                        "V-517-U",
                        "Retired"});
            table8.AddRow(new string[] {
                        "G-135-N",
                        "Retired"});
#line 62
 testRunner.Then("I should have the following transports in the system", ((string)(null)), table8, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
